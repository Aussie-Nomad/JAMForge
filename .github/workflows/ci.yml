# JAMForge CI/CD Pipeline
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events for main and develop branches
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables
env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build and test job
  build-and-test:
    name: Build and Test
    # Use macOS runner for Swift/Xcode projects
    runs-on: macos-latest
    
    # Timeout after 30 minutes to prevent hanging builds
    timeout-minutes: 30
    
    steps:
      # Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning
      
      # Set up Xcode
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Cache Swift Package Manager dependencies
      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      # Cache Xcode DerivedData
      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-deriveddata-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-deriveddata-
      
      # Install SwiftLint for code quality checks
      - name: Install SwiftLint
        run: |
          brew install swiftlint
          swiftlint version
      
      # Run SwiftLint
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging
        continue-on-error: true  # Don't fail the build on lint warnings
      
      # Resolve Swift Package dependencies
      - name: Resolve Swift Packages
        run: |
          xcodebuild -resolvePackageDependencies -project JAMForge.xcodeproj
      
      # Build the project
      - name: Build JAMForge
        run: |
          xcodebuild \
            -project JAMForge.xcodeproj \
            -scheme JAMForge \
            -destination 'platform=macOS' \
            -configuration Debug \
            clean build \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGN_ENTITLEMENTS="" \
            CODE_SIGNING_REQUIRED=NO
      
      # Run unit tests
      - name: Run Unit Tests
        run: |
          xcodebuild \
            -project JAMForge.xcodeproj \
            -scheme JAMForge \
            -destination 'platform=macOS' \
            -configuration Debug \
            test \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGN_ENTITLEMENTS="" \
            CODE_SIGNING_REQUIRED=NO
      
      # Upload test results
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult
          retention-days: 7

  # Security audit job
  security-audit:
    name: Security Audit
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Run security checks
      - name: Run Security Audit
        run: |
          echo "üîí Running security audit..."
          
          # Check for hardcoded secrets
          echo "Checking for potential secrets..."
          if grep -r -i "password\|secret\|token\|key" --include="*.swift" JAMForge/ | grep -v "// TODO\|// FIXME"; then
            echo "‚ö†Ô∏è  Potential secrets found in code"
          else
            echo "‚úÖ No obvious secrets found"
          fi
          
          # Check for unsafe API usage
          echo "Checking for unsafe API usage..."
          if grep -r "unsafeBitCast\|Unmanaged\|UnsafePointer" --include="*.swift" JAMForge/; then
            echo "‚ö†Ô∏è  Unsafe API usage found"
          else
            echo "‚úÖ No unsafe API usage found"
          fi
          
          # TODO: Add more security checks as needed
          echo "‚úÖ Security audit completed"

  # Code quality job
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Install additional quality tools
      - name: Install Quality Tools
        run: |
          brew install swiftlint
          # Add other tools as needed (e.g., SwiftFormat)
      
      # Generate code coverage if tests pass
      - name: Generate Code Coverage
        run: |
          xcodebuild \
            -project JAMForge.xcodeproj \
            -scheme JAMForge \
            -destination 'platform=macOS' \
            -configuration Debug \
            -enableCodeCoverage YES \
            test \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGN_ENTITLEMENTS="" \
            CODE_SIGNING_REQUIRED=NO
        continue-on-error: true
      
      # Upload coverage reports
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/ProfileData/Coverage.profdata
          retention-days: 7

  # Build documentation
  documentation:
    name: Build Documentation
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Check documentation formatting
      - name: Check Documentation
        run: |
          echo "üìö Checking documentation..."
          
          # Check if README exists and has content
          if [ -f "README.md" ] && [ -s "README.md" ]; then
            echo "‚úÖ README.md exists and has content"
          else
            echo "‚ùå README.md is missing or empty"
            exit 1
          fi
          
          # Check if main documentation files exist
          docs_missing=false
          for doc in "CONTRIBUTING.md" "Documentation/GettingStarted.md" "Documentation/API.md"; do
            if [ ! -f "$doc" ]; then
              echo "‚ö†Ô∏è  Missing documentation: $doc"
              docs_missing=true
            fi
          done
          
          if [ "$docs_missing" = true ]; then
            echo "‚ö†Ô∏è  Some documentation files are missing"
          else
            echo "‚úÖ Core documentation files present"
          fi
      
      # Validate markdown files
      - name: Validate Markdown
        run: |
          # Install markdownlint if available
          if command -v markdownlint &> /dev/null; then
            markdownlint README.md CONTRIBUTING.md Documentation/
          else
            echo "markdownlint not available, skipping..."
          fi

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Check for dependency vulnerabilities
      - name: Check Dependencies
        run: |
          echo "üîç Checking dependencies..."
          
          if [ -f "Package.swift" ]; then
            echo "üì¶ Swift Package Manager dependencies:"
            swift package show-dependencies
            
            # TODO: Add dependency vulnerability scanning
            # This could include tools like:
            # - OWASP dependency check
            # - GitHub's dependency graph API
            # - Custom vulnerability database checks
          fi
          
          echo "‚úÖ Dependency check completed"

# Workflow summary
  workflow-summary:
    name: Workflow Summary
    runs-on: macos-latest
    needs: [build-and-test, security-audit, code-quality, documentation, dependency-check]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "üéØ JAMForge CI/CD Workflow Summary"
          echo "=================================="
          echo "Build and Test: ${{ needs.build-and-test.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Documentation: ${{ needs.documentation.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "=================================="
          
          # Set overall status
          if [[ "${{ needs.build-and-test.result }}" == "success" && \
                "${{ needs.security-audit.result }}" == "success" && \
                "${{ needs.documentation.result }}" == "success" ]]; then
            echo "‚úÖ All critical checks passed!"
          else
            echo "‚ùå Some critical checks failed"
            exit 1
          fi

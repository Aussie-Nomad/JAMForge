# JAMForge Release Pipeline
name: Release

# Only trigger on version tags
on:
  push:
    tags:
      - 'v*.*.*'
  
  # Allow manual release creation
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

# Environment variables
env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  # Build release version
  build-release:
    name: Build Release
    runs-on: macos-latest
    timeout-minutes: 45
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      app-path: ${{ steps.build.outputs.app-path }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Extract version from tag or input
      - name: Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      # Import signing certificate (if you have one)
      - name: Import Certificate
        if: ${{ secrets.BUILD_CERTIFICATE_BASE64 != '' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      
      # Build for release
      - name: Build Release
        id: build
        run: |
          echo "üèóÔ∏è  Building JAMForge for release..."
          
          # Set version in project
          # agvtool new-marketing-version ${{ steps.version.outputs.version }}
          
          # Build archive
          xcodebuild \
            -project JAMForge.xcodeproj \
            -scheme JAMForge \
            -configuration Release \
            -destination 'platform=macOS' \
            -archivePath ./JAMForge.xcarchive \
            archive \
            MARKETING_VERSION=${{ steps.version.outputs.version }}
          
          # Export app
          xcodebuild \
            -exportArchive \
            -archivePath ./JAMForge.xcarchive \
            -exportPath ./Export \
            -exportOptionsPlist ./Scripts/ExportOptions.plist || \
          xcodebuild \
            -exportArchive \
            -archivePath ./JAMForge.xcarchive \
            -exportPath ./Export \
            -exportOptionsPlist <(cat << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>mac-application</string>
              <key>destination</key>
              <string>export</string>
          </dict>
          </plist>
          EOF
          )
          
          # Find the exported app
          APP_PATH=$(find ./Export -name "*.app" -type d | head -n 1)
          echo "app-path=${APP_PATH}" >> $GITHUB_OUTPUT
          echo "‚úÖ Built app at: ${APP_PATH}"
      
      # Create DMG
      - name: Create DMG
        run: |
          echo "üì¶ Creating DMG..."
          
          APP_NAME="JAMForge"
          DMG_NAME="JAMForge-${{ steps.version.outputs.version }}"
          
          # Create DMG using built-in tools
          mkdir -p ./dmg-temp
          cp -R "${{ steps.build.outputs.app-path }}" ./dmg-temp/
          
          # Create Applications symlink
          ln -s /Applications ./dmg-temp/Applications
          
          # Create DMG
          hdiutil create -volname "${APP_NAME}" \
                         -srcfolder ./dmg-temp \
                         -ov \
                         -format UDZO \
                         "${DMG_NAME}.dmg"
          
          echo "‚úÖ Created DMG: ${DMG_NAME}.dmg"
      
      # Upload build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jamforge-${{ steps.version.outputs.version }}
          path: |
            JAMForge-${{ steps.version.outputs.version }}.dmg
            ${{ steps.build.outputs.app-path }}
          retention-days: 30

  # Notarize (if you have Apple Developer credentials)
  notarize:
    name: Notarize
    runs-on: macos-latest
    needs: build-release
    if: ${{ secrets.NOTARIZE_USERNAME != '' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: jamforge-${{ needs.build-release.outputs.version }}
      
      - name: Notarize DMG
        env:
          NOTARIZE_USERNAME: ${{ secrets.NOTARIZE_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.NOTARIZE_PASSWORD }}
        run: |
          echo "üîí Notarizing DMG..."
          
          DMG_PATH="JAMForge-${{ needs.build-release.outputs.version }}.dmg"
          
          # Submit for notarization
          xcrun notarytool submit "${DMG_PATH}" \
            --apple-id "${NOTARIZE_USERNAME}" \
            --password "${NOTARIZE_PASSWORD}" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait
          
          # Staple the notarization
          xcrun stapler staple "${DMG_PATH}"
          
          echo "‚úÖ DMG notarized successfully"
      
      - name: Upload Notarized DMG
        uses: actions/upload-artifact@v4
        with:
          name: jamforge-${{ needs.build-release.outputs.version }}-notarized
          path: JAMForge-${{ needs.build-release.outputs.version }}.dmg
          retention-days: 90

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-release, notarize]
    if: always() && needs.build-release.result == 'success'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Download the appropriate artifact (notarized if available, otherwise regular)
      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: |
            ${{ needs.notarize.result == 'success' && 
                format('jamforge-{0}-notarized', needs.build-release.outputs.version) || 
                format('jamforge-{0}', needs.build-release.outputs.version) }}
      
      # Generate release notes
      - name: Generate Release Notes
        id: release-notes
        run: |
          echo "Generating release notes..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" > release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release-notes.md
          else
            echo "## Initial Release" > release-notes.md
            echo "" >> release-notes.md
            echo "First release of JAMForge - A modern Configuration Profile creator and JAMF Pro deployment tool." >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "## Features" >> release-notes.md
          echo "- Modern Dark UI optimized for macOS" >> release-notes.md
          echo "- Drag & Drop application analysis" >> release-notes.md
          echo "- JAMF Pro integration" >> release-notes.md
          echo "- Security templates for common applications" >> release-notes.md
          echo "- Privacy settings catalog with plain-English explanations" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Installation" >> release-notes.md
          echo "1. Download the DMG file below" >> release-notes.md
          echo "2. Open the DMG and drag JAMForge to your Applications folder" >> release-notes.md
          echo "3. Launch JAMForge from Applications" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Requirements" >> release-notes.md
          echo "- macOS 13.0 or later" >> release-notes.md
          echo "- For JAMF integration: JAMF Pro 10.25 or later" >> release-notes.md
      
      # Create the release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-release.outputs.version }}
          name: JAMForge ${{ needs.build-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.build-release.outputs.version, 'beta') || contains(needs.build-release.outputs.version, 'alpha') }}
          files: |
            JAMForge-${{ needs.build-release.outputs.version }}.dmg
          token: ${{ secrets.GITHUB_TOKEN }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Version in README
        run: |
          # Update version badges in README
          sed -i "s/Version-[^-]*-/Version-${{ needs.build-release.outputs.version }}-/" README.md
          
          # Commit changes if any
          if git diff --quiet; then
            echo "No documentation updates needed"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "Update documentation for release ${{ needs.build-release.outputs.version }}"
            git push
          fi

  # Notify community (optional)
  notify:
    name: Notify Community
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success() && !contains(needs.build-release.outputs.version, 'beta')
    
    steps:
      - name: Notify Release
        run: |
          echo "üéâ JAMForge ${{ needs.build-release.outputs.version }} has been released!"
          echo "üì• Download: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-release.outputs.version }}"
          
          # Here you could add:
          # - Slack notifications to MacAdmins community
          # - Twitter/social media posts
          # - Email notifications
          # - Discord/Teams webhooks
